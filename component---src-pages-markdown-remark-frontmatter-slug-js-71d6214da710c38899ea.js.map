{"version":3,"file":"component---src-pages-markdown-remark-frontmatter-slug-js-71d6214da710c38899ea.js","mappings":"gMAIe,SAASA,EAAT,GAA6B,IAAbC,EAAY,EAAZA,SAE7B,OACE,uBAAKC,UCNS,4BDOVD,GERR,SAASE,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,G,+BCRxB,SAASS,EAAT,GAAwC,IAAjBC,EAAgB,EAAhBA,aAEpC,GAAwBC,EAAAA,EAAAA,UAAS,IAA1BC,EAAP,KAAaC,EAAb,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAA1BG,EAAP,KAAaC,EAAb,KAEMC,EAAY,eDOsBC,ECPtB,GDOsBA,ECPtB,UAAG,WAAOC,GAAP,8EACnBA,EAAIC,iBADe,kBAGMC,MAAM,sEAAuE,CAClGC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBV,KAAMW,KAAKC,UAAU,CACnBZ,KAAAA,EACAF,aAAAA,EACAI,KAAAA,MAXa,cAGXW,EAHW,OAcjBC,QAAQC,IAAIF,GAdK,kBAeVA,EAASG,QAfC,gCAiBjBF,QAAQrB,MAAR,MAjBiB,wDDQd,WACL,IAAIwB,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIzB,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMqB,EAAGgB,MAAMJ,EAAME,GAEzB,SAAShC,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOkC,GACdvC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASkC,GAGnEnC,OAAMoC,QCtBQ,sDAqBlB,OACE,wBAAMC,SAAUpB,GACd,6BACE,yBACIqB,KAAK,OACLjC,MAAOU,EACPwB,SAAU,SAAAC,GAAC,OAAIxB,EAAQwB,EAAEC,OAAOpC,UAEpC,4BACEA,MAAOQ,EACP0B,SAAU,SAAAC,GAAC,OAAI1B,EAAQ0B,EAAEC,OAAOpC,WAGpC,yBAAOiC,KAAK,SAASjC,MAAM,YClClB,SAASqC,EAAT,GAA6B,IAC1C,EADyC,EAARC,KACCC,eAA1BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,KAErB,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,MACA,gBAACrD,EAAD,KACE,0BAAKoD,EAAYE,OACjB,6BAAQF,EAAYG,MACpB,uBAAKC,wBAAyB,CAAEC,OAAQJ,MAE1C,gBAACpC,EAAD,CACEC,aAAckC,EAAYlC,kB,qBCrBlCwC,EAAOC,QAAU,EAAjB","sources":["webpack://andy-polhill/./src/components/post/post.js","webpack://andy-polhill/./src/components/post/post.module.css","webpack://andy-polhill/./node_modules/gatsby/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://andy-polhill/./src/components/commentForm/commentForm.js","webpack://andy-polhill/./src/pages/{MarkdownRemark.frontmatter__slug}.js","webpack://andy-polhill/./node_modules/gatsby/node_modules/@babel/runtime/regenerator/index.js"],"sourcesContent":["import React from \"react\";\n\nimport * as styles from \"./post.module.css\";\n\nexport default function Post({ children }) {\n\n  return (\n    <div className={ styles.post }>\n      { children }\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport var post = \"post-module--post--2A2V8\";","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { Link } from \"gatsby\";\nimport PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\n\nexport default function CommentForm({ discussionId }) {\n\n  const [body, setBody] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      const response = await fetch(\"https://europe-west2-andypolhill.cloudfunctions.net/receive_comment\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          body,\n          discussionId,\n          name\n        }) \n      })\n      console.log(response);\n      return response.json(); // parses JSON response into native JavaScript objects\n    } catch(error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <input\n            type=\"text\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n          />\n        <textarea\n          value={body}\n          onChange={e => setBody(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  )\n}\n\nCommentForm.propTypes = {\n  discussionId: PropTypes.string.isRequired,\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\n\nimport Page from \"../components/page\";\nimport Hero from \"../components/hero/hero\";\nimport Post from \"../components/post/post\";\nimport CommentForm from \"../components/commentForm/commentForm\";\n\nexport default function BlogPost({ data }) {\n  const { frontmatter, html} = data.markdownRemark;\n\n  return (\n    <Page>\n      <Hero />\n      <Post>\n        <h1>{frontmatter.title}</h1>\n        <small>{frontmatter.date}</small>\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n      </Post>\n      <CommentForm\n        discussionId={frontmatter.discussionId}\n      />\n    </Page>\n  );\n}\n\nBlogPost.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      html: PropTypes.string.isRequired,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        discussionId: PropTypes.string.isRequired,\n      }).isRequired\n    }).isRequired\n  }).isRequired\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        discussionId\n      }\n    }\n  }\n`","module.exports = require(\"regenerator-runtime\");\n"],"names":["Post","children","className","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","CommentForm","discussionId","useState","body","setBody","name","setName","handleSubmit","fn","evt","preventDefault","fetch","method","headers","JSON","stringify","response","console","log","json","self","this","args","arguments","apply","err","undefined","onSubmit","type","onChange","e","target","BlogPost","data","markdownRemark","frontmatter","html","title","date","dangerouslySetInnerHTML","__html","module","exports"],"sourceRoot":""}