{"version":3,"file":"component---src-pages-blog-mdx-slug-js-193d34108ee89ccf8e51.js","mappings":"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","sources":["webpack://andy-polhill/./src/components/post/post.js","webpack://andy-polhill/./src/components/post/post.module.css","webpack://andy-polhill/./src/components/comments/comments.module.css","webpack://andy-polhill/./src/components/comments/comment.js","webpack://andy-polhill/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://andy-polhill/./src/components/alert/alert.js","webpack://andy-polhill/./src/components/alert/alert.module.css","webpack://andy-polhill/./src/components/commentForm/commentForm.module.css","webpack://andy-polhill/./src/components/commentForm/commentForm.js","webpack://andy-polhill/./src/components/comments/comments.js","webpack://andy-polhill/./src/pages/blog/{mdx.slug}.js"],"sourcesContent":["import React from \"react\";\n\nimport * as styles from \"./post.module.css\";\n\nexport default function Post({ children }) {\n\n  return (\n    <div className={ styles.post }>\n      { children }\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport var post = \"post-module--post--7qTb0\";","// extracted by mini-css-extract-plugin\nexport var comments = \"comments-module--comments--EX9Eh\";\nexport var comments__list = \"comments-module--comments__list--z3n70\";\nexport var comment = \"comments-module--comment--sCTJa\";\nexport var comment__title = \"comments-module--comment__title--TT06f\";\nexport var comment__date = \"comments-module--comment__date--P+qfP\";","import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport * as styles from \"./comments.module.css\";\n\nconst Comment = ({ author, body, date, pending, url }) => {\n  return (\n    <li role=\"comment\" data-author={ author } className={ styles.comment }>\n      <h4 className={ styles.comment__title }>\n        { pending && <span alt=\"Pending\">‚è±</span>}\n        { url && (\n          <Fragment>\n            <a href={ url }>{ author }</a>\n            <small className={ styles.comment__date }>{ date }</small>\n          </Fragment>            \n        )}\n        { !url && (\n          <Fragment>\n            { author }\n            <small className={ styles.comment__date }>{ date }</small>\n          </Fragment>\n        )}\n      </h4>\n      <p>{ body }</p>\n    </li>\n  )\n}\n\nComment.propTypes = {\n  body: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  author: PropTypes.string, /*.isRequired,*/\n  url: PropTypes.string,\n  pending: PropTypes.bool,\n};\n\n\nexport default Comment;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from \"react\";\nimport * as styles from \"./alert.module.css\";\n\nexport default function Alert({ children }) {\n  return <p className={ styles.alert } role=\"alert\">{ children }</p>;\n}","// extracted by mini-css-extract-plugin\nexport var alert = \"alert-module--alert--rKXHh\";","// extracted by mini-css-extract-plugin\nexport var commentForm = \"commentForm-module--commentForm--PR96M\";\nexport var commentForm__label = \"commentForm-module--commentForm__label--Hu-Ti\";\nexport var commentForm__textarea = \"commentForm-module--commentForm__textarea--D9fdt\";\nexport var commentForm__input = \"commentForm-module--commentForm__input--JnGeF\";","import PropTypes from \"prop-types\";\nimport React, { useState } from \"react\";\nimport Alert from \"../alert/alert\";\n\nimport * as styles from \"./commentForm.module.css\";\n\nexport default function CommentForm({ discussionId, addComment }) {\n\n  const [body, setBody] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://europe-west2-andypolhill.cloudfunctions.net/receive_comment\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          body,\n          discussionId,\n          author,\n          url\n        }) \n      });\n\n      const json = await response.json();\n\n      if(!response.ok) {\n        throw json.message;\n      }\n\n      setBody(\"\");\n      setAuthor(\"\");\n      setUrl(\"\");\n      plausible(\"comment\");\n      addComment({body, author, url, pending: true});\n    } catch(error) {\n      setError(error);\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit } className={ styles.commentForm }>\n      <label className={ styles.commentForm__label }>\n        Name\n        <input\n            type=\"text\"\n            value={ author }\n            className={ styles.commentForm__input }\n            onChange={e => setAuthor(e.target.value)}\n            size={ 40 }\n            maxLength={ 50 }\n          />\n      </label>\n      <label className={ styles.commentForm__label }>\n        Link (optional)\n        <input\n            type=\"text\"\n            value={ url }\n            className={ styles.commentForm__input }\n            onChange={e => setUrl(e.target.value)}\n            placeholder=\"https://\"\n            size={ 40 }\n            maxLength={ 50 }\n          />\n      </label>\n      <label className={ styles.commentForm__label }>\n        Body\n        <textarea\n          value={ body }\n          className={ styles.commentForm__textarea }\n          onChange={e => setBody(e.target.value)}\n          maxLength={ 500 }\n        />\n      </label>\n\n      { error && (\n        <Alert>{ error }</Alert>\n      )}\n\n      <button>Post comment</button>\n\n    </form>\n  )\n}\n\nCommentForm.propTypes = {\n  discussionId: PropTypes.string.isRequired,\n  addComment: PropTypes.func.isRequired,\n}\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Comment from \"./comment\";\nimport CommentForm from \"../commentForm/commentForm\";\n\nimport * as styles from \"./comments.module.css\";\n\nconst Comments = ({ comments, discussionId }) => {\n\n  const [commentState, setCommentState] = useState(comments);\n\n  function addComment(comment) {\n    setCommentState([ ...commentState, comment]);    \n  }\n\n  return (\n    <section className={ styles.comments }>\n      <h3>Comments</h3>\n      <ul className={ styles.comments__list }>\n        {commentState.map(({ author, body, date, pending, url }, index) => (\n          <Comment\n            author={ author }\n            key={ index }\n            body={ body }\n            date={ date }\n            pending={ pending }\n            url={ url }\n            />\n        ))}\n      </ul>\n\n      <CommentForm\n        addComment={ addComment }\n        discussionId={ discussionId } />\n    </section>\n  )\n}\n\nComments.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      body: PropTypes.string.isRequired\n    })\n  )\n}\n\n\nexport default Comments;","\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\n\nimport Page from \"../../components/page\";\nimport Hero from \"../../components/hero/hero\";\nimport Post from \"../../components/post/post\";\nimport Comments from \"../../components/comments/comments\";\n\nexport default function BlogPost({ data }) {\n  const { body, comments, frontmatter } = data.mdx;\n  const { discussionId } = frontmatter;\n\n  return (\n    <Page>\n      <Hero />\n      <Post>\n        <h1>{frontmatter.title}</h1>\n        <small>{frontmatter.date}</small>\n        <MDXRenderer>\n          {body}\n        </MDXRenderer>\n      </Post>\n      <Comments\n        comments={ comments }\n        discussionId={ discussionId } />\n    </Page>\n  );\n}\n\nBlogPost.propTypes = {\n  data: PropTypes.shape({\n    mdx: PropTypes.shape({\n      body: PropTypes.string.isRequired,\n      comments: PropTypes.arrayOf(PropTypes.shape({\n        date: PropTypes.string.isRequired,\n        body: PropTypes.string.isRequired,\n        author: PropTypes.string, /*.isRequired,*/\n        url: PropTypes.string\n      })).isRequired,\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n        date: PropTypes.string.isRequired,\n        discussionId: PropTypes.string.isRequired,\n      }).isRequired\n    }).isRequired\n  }).isRequired\n}\n\nexport const pageQuery = graphql`\n  query($id: String!) {\n    mdx(id: { eq: $id }) {\n      body\n      comments {\n        body\n        date(formatString: \"MMMM DD, YYYY\")\n        author\n        url\n      }\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        discussionId\n      }\n    }\n  }\n`"],"names":["Post","children","className","comment__date","author","body","date","pending","url","role","alt","Fragment","href","styles","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","Alert","commentForm__label","commentForm__input","CommentForm","discussionId","addComment","useState","setBody","setAuthor","setUrl","setError","handleSubmit","fn","evt","preventDefault","fetch","method","headers","JSON","stringify","response","json","ok","message","plausible","self","this","args","arguments","apply","err","undefined","onSubmit","type","onChange","e","target","size","maxLength","placeholder","comments","commentState","setCommentState","map","index","comment","BlogPost","data","mdx","frontmatter","title","MDXRenderer"],"sourceRoot":""}